// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/regiwitanto/auth-service/internal/domain"
	"github.com/stretchr/testify/mock"
)

// MockAuthUseCase is a mock of AuthUseCase interface.
type MockAuthUseCase struct {
	mock.Mock
}

// Register provides a mock function with given fields: ctx, request
func (_m *MockAuthUseCase) Register(ctx context.Context, request *domain.RegisterRequest) (*domain.UserResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RegisterRequest) *domain.UserResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.RegisterRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, request
func (_m *MockAuthUseCase) Login(ctx context.Context, request *domain.LoginRequest) (*domain.TokenResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.LoginRequest) *domain.TokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.LoginRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, request
func (_m *MockAuthUseCase) RefreshToken(ctx context.Context, request *domain.RefreshTokenRequest) (*domain.TokenResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RefreshTokenRequest) *domain.TokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.RefreshTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, token
func (_m *MockAuthUseCase) Logout(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserProfile provides a mock function with given fields: ctx, userID
func (_m *MockAuthUseCase) GetUserProfile(ctx context.Context, userID string) (*domain.UserResponse, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: tokenString
func (_m *MockAuthUseCase) VerifyToken(tokenString string) (map[string]interface{}, error) {
	ret := _m.Called(tokenString)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
